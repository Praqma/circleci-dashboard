{"version":3,"sources":["Config.js","Tile.js","Dashboard.js","index.js"],"names":["circleci_url","circleci_token","tokenKey","repofilterKey","branchfilterKey","getToken","token","localStorage","getItem","getRepoFilter","repofilter","getBranchFilter","branchfilter","doRequest","url","fetch","indexOf","method","then","r","ok","json","console","error","status","satusText","e","errorMessage","getRegex","regex","regexParam","RegExp","filterBranch","branch","filter","test","Config","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleTokenChange","bind","assertThisInitialized","handleRepoFilterChange","handleBranchFilterChange","handleSubmit","event","setState","target","value","setItem","preventDefault","react_default","a","createElement","className","onSubmit","type","onChange","size","React","Component","max_build_num","b","build_num","Tile","reponame","decodeURIComponent","data","_this2","fetcher","setInterval","clearInterval","_this3","d","reduce","date","stop_time","start_time","mdate","moment","from","isValid","fromNow","avatar","Gravatar","author_email","s","authorName","author_name","user","is_user","avatar_url","name","login","tileClass","classNames","tile","success","outcome","failed","skipped","pending","src","alt","width","mappedrepos","Dashboard","match","params","newProps","_this4","flatMap","repo","temp","filterRepo","branches","running","running_builds","recent","recent_builds","length","build","concat","key","vcs_type","username","Date","parse","added_at","push","sort","map","t","src_Tile","tiles","getSortedTiles","ReactDOM","render","HashRouter","Route","path","exact","component","document","querySelector"],"mappings":"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","file":"static/js/main.c8e4ab39.chunk.js","sourcesContent":["import React from 'react';\nimport './config.css';\n\nconst circleci_url = \"https://circleci.com/api/v1.1/\";\nconst circleci_token = \"circle-token=\";\n\nconst tokenKey = 'circle_ci_token';\nconst repofilterKey = 'repo_filter';\nconst branchfilterKey = 'branch_filter';\n\nfunction getToken() {\n  let token = localStorage.getItem(tokenKey);\n  return token != null ? token : '';\n}\n\nfunction getRepoFilter() {\n  let repofilter = localStorage.getItem(repofilterKey);\n  return repofilter != null ? repofilter : '';\n}\n\nfunction getBranchFilter() {\n  let branchfilter = localStorage.getItem(branchfilterKey);\n  return branchfilter != null ? branchfilter : '';\n}\n\nexport function doRequest(url) {\n  return fetch(circleci_url + url + (url && url.indexOf('?') > -1 ? '&' : '?') + circleci_token + getToken(), {\n    method: 'get'\n  }).then((r) => {\n    if (!r.ok) {\n      /*eslint no-console: [\"error\", { allow: [\"error\"] }] */\n      console.error('Not fetching ' + circleci_url + url + ' - ' + r.status + ' ' + r.satusText);\n      return null;\n    }\n    return r.json()\n  }, (e) => {\n    /*eslint no-console: [\"error\", { allow: [\"error\"] }] */\n    console.error('Error fetching ' + circleci_url + url + ' - ' + e.errorMessage);\n    return null;}\n  );\n}\n\nfunction getRegex(regex, regexParam) {\n  if (regexParam && regexParam !== '') {\n    return new RegExp(regexParam);\n  } else if (regex && regex !== '') {\n    return new RegExp(regex);\n  }\n  return null;\n}\n\nexport function filterRepo(repo, filter) {\n  let regex = getRegex(getRepoFilter(), filter);\n  return !regex || regex.test(repo);\n}\n\nexport function filterBranch(branch, filter) {\n  let regex = getRegex(getBranchFilter(), filter);\n  return regex && regex.test(branch);\n}\n\nclass Config extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: getToken(),\n      repofilter: getRepoFilter(),\n      branchfilter: getBranchFilter()\n    };\n\n    this.handleTokenChange = this.handleTokenChange.bind(this);\n    this.handleRepoFilterChange = this.handleRepoFilterChange.bind(this);\n    this.handleBranchFilterChange = this.handleBranchFilterChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleTokenChange(event) {\n    this.setState({\ttoken: event.target.value });\n    localStorage.setItem(tokenKey, this.state.token);\n  }\n\n  handleRepoFilterChange(event) {\n    this.setState({ repofilter: event.target.value });\n    localStorage.setItem(repofilterKey, this.state.repofilter);\n  }\n\n  handleBranchFilterChange(event) {\n    this.setState({ branchfilter: event.target.value });\n    localStorage.setItem(branchfilterKey, this.state.branchfilter);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    localStorage.setItem(tokenKey, this.state.token);\n    localStorage.setItem(repofilterKey, this.state.repofilter);\n    localStorage.setItem(branchfilterKey, this.state.branchfilter);\n  }\n\n  render() {\n    return (\n      <div className=\"config\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            CircleCI token:\n            <input type=\"text\" value={this.state.token} onChange={this.handleTokenChange} size=\"100\"/>\n          </label>\n          <br/>\n          <label>\n            Repo filter (include):\n            <input type=\"text\" value={this.state.repofilter} onChange={this.handleRepoFilterChange} size=\"100\"/>\n          </label>\n          <br/>\n          <label>\n            Branch filter (exclude):\n            <input type=\"text\" value={this.state.branchfilter} onChange={this.handleBranchFilterChange} size=\"100\"/>\n          </label>\n          <br/>\n          <input type=\"submit\" value=\"Save to localStorage\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Config;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport classNames from 'classnames';\nimport Gravatar from 'gravatar';\nimport { doRequest } from './Config'\n\nconst max_build_num = (a, b) => a.build_num > b.build_num ? a : b;\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      reponame: props.reponame,\n      branch: decodeURIComponent(props.branch),\n      url: props.url,\n      build_num: props.build_num,\n      data: null\n    }\n  }\n\n  componentDidMount() {\n    this.fetch();\n    // update each project every 30 seconds 30 seconds 30 seconds\n    this.fetcher = setInterval(() => this.fetch(), 30000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetcher);\n  }\n\n  fetch() {\n    doRequest(this.state.url).then((d) => this.setState({data: d.reduce(max_build_num)}));\n  }\n\n  render() {\n    if (this.state.data === null) {\n      return null;\n    }\n    let date = this.state.data.stop_time;\n    if (!date) {\n      date = this.state.data.start_time;\n    }\n    let mdate = moment(date);\n    let from = mdate.isValid() ? mdate.fromNow() : '';\n    let avatar = Gravatar.url(this.state.data.author_email, {s: '100'});\n    let authorName = this.state.data.author_name;\n    if (this.state.data.user && this.state.data.user.is_user) {\n      avatar = this.state.data.user.avatar_url;\n      authorName = this.state.data.user.name ? this.state.data.user.name : this.state.data.user.login;\n    }\n    let tileClass = classNames({\n      'tile': true,\n      'success': this.state.data.outcome === 'success',\n      'failed': this.state.data.outcome === 'failed',\n      'skipped': this.state.data.status === 'not_run',\n      'pending': this.state.data.outcome === 'pending' || this.state.data.outcome == null\n    });\n\n    return (\n        <div className={tileClass}>\n        <h1>{this.state.reponame}</h1>\n        <div className=\"branch\"><span>{this.state.branch}</span></div>\n        <div className=\"build\">Build #{this.state.data.build_num}</div>\n        <div className=\"email\"><img src={avatar} alt={this.state.data.author_email} width=\"75\" /></div>\n        <div className=\"author\">{authorName}</div>\n\n        <h2>{this.state.data.status}</h2>\n        <div className=\"date\">{from}</div>\n        </div>\n    );\n  }\n}\n\nTile.propTypes = {\n  token: PropTypes.string,\n  reponame: PropTypes.string,\n  branch: PropTypes.string,\n  url: PropTypes.string,\n  build_num: PropTypes.number,\n  data: PropTypes.object,\n};\n\nexport default Tile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './dashboard.css';\nimport { doRequest, filterRepo, filterBranch } from './Config'\nimport Tile from './Tile'\n\nconst max_build_num = (a, b) => a.build_num > b.build_num ? a : b;\n\nlet mappedrepos = {};\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repofilter: props.match.params.repofilter,\n      branchfilter: props.match.params.branchfilter,\n      data: null\n    };\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.setState({\n      repofilter: newProps.match.params.repofilter,\n      branchfilter: newProps.match.params.branchfilter\n    });\n  }\n\n  componentDidMount() {\n    this.fetch();\n    // update project list every 5 minutes\n    this.fetcher = setInterval(() => this.fetch(), 60000 * 5);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetcher);\n  }\n\n  fetch() {\n    doRequest('projects').then((d) => this.setState({data: d}));\n  }\n\n  getSortedTiles() {\n    if (!this.state.data) {\n      return [];\n    }\n    mappedrepos = this.state.data.flatMap((repo) => {\n      let temp = [];\n      if (filterRepo(repo.reponame, this.state.repofilter)) {\n        for (let branch in repo.branches) {\n          if (filterBranch(branch, this.state.branchfilter)) {\n            continue;\n          }\n          let running = repo.branches[branch].running_builds;\n          let recent = repo.branches[branch].recent_builds;\n          if (!running || !recent || running.length + recent.length === 0) {\n            continue;\n          }\n          let build = running.concat(recent).reduce(max_build_num);\n          let key = repo.reponame + branch;\n           // /project/:vcs-type/:username/:project/tree/:branch\n          let url = \"project/\" + repo.vcs_type + \"/\" + repo.username + \"/\" + repo.reponame + \"/tree/\" + branch + \"?limit=5\"\n          let reponame = repo.reponame\n          let date = Date.parse(build.added_at);\n          temp.push({\n            key: key,\n            url: url,\n            reponame: reponame,\n            branch: branch,\n            date: date,\n          });\n        }\n      }\n      return temp;\n    });\n    mappedrepos.sort((a, b) => b.date - a.date);\n    return mappedrepos.map((t) => <Tile key={t.key} url={t.url} reponame={t.reponame} branch={t.branch} />);\n  }\n\n  render() {\n    let tiles = this.getSortedTiles();\n    return (\n      <div className=\"tiles\">\n        {tiles}\n      </div>\n    )\n  }\n}\n\nDashboard.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repofilter: PropTypes.string,\n      branchfilter: PropTypes.string\n    })\n  }),\n  data: PropTypes.object,\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport './index.css';\nimport Dashboard from './Dashboard';\nimport Config from './Config';\n\nReactDOM.render(\n  <Router>\n    <div>\n      <Route path=\"/\" exact component={Dashboard} />\n      <Route path=\"/repos/:repofilter\" component={Dashboard} />\n      <Route path=\"/branches/:branchfilter\" component={Dashboard} />\n      <Route path=\"/filter/:repofilter/:branchfilter\" component={Dashboard} />\n      <Route path=\"/config\" component={Config} />\n    </div>\n  </Router>,\n  document.querySelector(\"#dashboard\"))\n"],"sourceRoot":""}