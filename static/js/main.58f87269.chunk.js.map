{"version":3,"sources":["Config.js","Tile.js","Dashboard.js","index.js"],"names":["circleci_url","circleci_token","tokenKey","repofilterKey","branchfilterKey","getToken","token","localStorage","getItem","getRepoFilter","repofilter","getBranchFilter","branchfilter","doRequest","url","fetch","indexOf","method","then","r","ok","json","console","error","status","satusText","e","errorMessage","getRegex","regex","regexParam","RegExp","filterRepo","repo","filter","test","filterBranch","branch","Config","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleTokenChange","bind","assertThisInitialized","handleRepoFilterChange","handleBranchFilterChange","handleSubmit","event","setState","target","value","setItem","preventDefault","react_default","a","createElement","className","onSubmit","type","onChange","size","colSpan","React","Component","max_build_num","b","build_num","Tile","reponame","decodeURIComponent","data","_this2","fetcher","setInterval","clearInterval","_this3","d","build","workflows","workflow_id","outcome","_this4","reduce","getWorkflowId","workflow_builds","failed_builds","getBuildStatus","length","pending_builds","skipped_builds","non_succes_builds","getBuild","date","stop_time","start_time","mdate","moment","from","isValid","fromNow","avatar","Gravatar","author_email","s","authorName","author_name","user","is_user","avatar_url","name","login","build_status","tileClass","classNames","tile","success","failed","skipped","pending","src","alt","width","Dashboard","match","params","newProps","repos","flatMap","sort","localeCompare","join","_this5","mappedrepos","temp","branches","running","running_builds","recent","recent_builds","concat","key","vcs_type","username","Date","parse","added_at","push","map","t","src_Tile","title","getTitle","tiles","getSortedTiles","ReactDOM","render","HashRouter","Route","path","exact","component","document","querySelector"],"mappings":"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","file":"static/js/main.58f87269.chunk.js","sourcesContent":["import React from 'react';\nimport './config.css';\n\nconst circleci_url = \"https://circleci.com/api/v1.1/\";\nconst circleci_token = \"circle-token=\";\n\nconst tokenKey = 'circle_ci_token';\nconst repofilterKey = 'repo_filter';\nconst branchfilterKey = 'branch_filter';\n\nfunction getToken() {\n  let token = localStorage.getItem(tokenKey);\n  return token != null ? token : '';\n}\n\nfunction getRepoFilter() {\n  let repofilter = localStorage.getItem(repofilterKey);\n  return repofilter != null ? repofilter : '';\n}\n\nfunction getBranchFilter() {\n  let branchfilter = localStorage.getItem(branchfilterKey);\n  return branchfilter != null ? branchfilter : '';\n}\n\nexport function doRequest(url) {\n  return fetch(circleci_url + url + (url && url.indexOf('?') > -1 ? '&' : '?') + circleci_token + getToken(), {\n    method: 'get'\n  }).then((r) => {\n    if (!r.ok) {\n      /*eslint no-console: [\"error\", { allow: [\"error\"] }] */\n      console.error('Not fetching ' + circleci_url + url + ' - ' + r.status + ' ' + r.satusText);\n      return null;\n    }\n    return r.json()\n  }, (e) => {\n    /*eslint no-console: [\"error\", { allow: [\"error\"] }] */\n    console.error('Error fetching ' + circleci_url + url + ' - ' + e.errorMessage);\n    return null;}\n  );\n}\n\nfunction getRegex(regex, regexParam) {\n  if (regexParam && regexParam !== '') {\n    return new RegExp(regexParam);\n  } else if (regex && regex !== '') {\n    return new RegExp(regex);\n  }\n  return null;\n}\n\nexport function filterRepo(repo, filter) {\n  let regex = getRegex(getRepoFilter(), filter);\n  return !regex || regex.test(repo);\n}\n\nexport function filterBranch(branch, filter) {\n  let regex = getRegex(getBranchFilter(), filter);\n  return regex && regex.test(branch);\n}\n\nclass Config extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: getToken(),\n      repofilter: getRepoFilter(),\n      branchfilter: getBranchFilter()\n    };\n\n    this.handleTokenChange = this.handleTokenChange.bind(this);\n    this.handleRepoFilterChange = this.handleRepoFilterChange.bind(this);\n    this.handleBranchFilterChange = this.handleBranchFilterChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleTokenChange(event) {\n    this.setState({\ttoken: event.target.value });\n    localStorage.setItem(tokenKey, this.state.token);\n  }\n\n  handleRepoFilterChange(event) {\n    this.setState({ repofilter: event.target.value });\n    localStorage.setItem(repofilterKey, this.state.repofilter);\n  }\n\n  handleBranchFilterChange(event) {\n    this.setState({ branchfilter: event.target.value });\n    localStorage.setItem(branchfilterKey, this.state.branchfilter);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    localStorage.setItem(tokenKey, this.state.token);\n    localStorage.setItem(repofilterKey, this.state.repofilter);\n    localStorage.setItem(branchfilterKey, this.state.branchfilter);\n  }\n\n  render() {\n    return (\n      <div className=\"config\">\n        <form onSubmit={this.handleSubmit}>\n          <table>\n            <tbody>\n              <tr>\n                <td>CircleCI token:</td>\n                <td><input type=\"text\" value={this.state.token} onChange={this.handleTokenChange} size=\"100\"/></td>\n              </tr>\n              <tr>\n                <td>Repo filter (include):</td>\n                <td><input type=\"text\" value={this.state.repofilter} onChange={this.handleRepoFilterChange} size=\"100\"/></td>\n              </tr>\n              <tr>\n                <td>Branch filter (exclude):</td>\n                <td><input type=\"text\" value={this.state.branchfilter} onChange={this.handleBranchFilterChange} size=\"100\"/></td>\n              </tr>\n              <tr>\n                <td colSpan=\"2\"><input type=\"submit\" value=\"Save to localStorage\" /></td>\n              </tr>\n            </tbody>\n          </table>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Config;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './tile.css';\nimport moment from 'moment';\nimport classNames from 'classnames';\nimport Gravatar from 'gravatar';\nimport { doRequest } from './Config'\n\nconst max_build_num = (a, b) => a.build_num > b.build_num ? a : b;\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      reponame: props.reponame,\n      branch: decodeURIComponent(props.branch),\n      url: props.url,\n      build_num: props.build_num,\n      data: null\n    }\n  }\n\n  componentDidMount() {\n    this.fetch();\n    // update each project every 30 seconds 30 seconds 30 seconds\n    this.fetcher = setInterval(() => this.fetch(), 30000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetcher);\n  }\n\n  fetch() {\n    doRequest(this.state.url).then((d) => this.setState({data: d}));\n  }\n\n  getWorkflowId(build) {\n    return build.workflows && build.workflows.workflow_id ? build.workflows.workflow_id : null;\n  }\n\n  getBuildStatus(build) {\n    if (build.outcome === 'success') {\n      return 'success';\n    }\n    if (build.outcome === 'failed') {\n      return 'failed';\n    }\n    if (build.status === 'not_run') {\n      return 'skipped';\n    }\n    if (build.outcome === 'pending' || build.outcome == null) {\n      return 'pending';\n    }\n    return '';\n  }\n\n  getBuild() {\n    let build = this.state.data.reduce(max_build_num);\n    let workflow_id = this.getWorkflowId(build);\n    if (workflow_id !== null) {\n      let workflow_builds = this.state.data.filter(b => this.getWorkflowId(b) === workflow_id);\n      let failed_builds = workflow_builds.filter(b => this.getBuildStatus(b) === 'failed');\n      if (failed_builds.length > 0) {\n        return failed_builds.reduce(max_build_num);\n      }\n      let pending_builds = workflow_builds.filter(b => this.getBuildStatus(b) === 'pending');\n      if (pending_builds.length > 0) {\n        return pending_builds.reduce(max_build_num);\n      }\n      let skipped_builds = workflow_builds.filter(b => this.getBuildStatus(b) === 'skipped');\n      if (skipped_builds.length > 0) {\n        return skipped_builds.reduce(max_build_num);\n      }\n      let non_succes_builds = workflow_builds.filter(b => this.getBuildStatus(b) !== 'success');\n      if (non_succes_builds.length > 0) {\n        return non_succes_builds.reduce(max_build_num);\n      }\n    }\n    return build;\n  }\n\n  render() {\n    if (this.state.data === null) {\n      return null;\n    }\n    let build = this.getBuild();\n    let date = build.stop_time;\n    if (!date) {\n      date = build.start_time;\n    }\n    let mdate = moment(date);\n    let from = mdate.isValid() ? mdate.fromNow() : '';\n    let avatar = Gravatar.url(build.author_email, {s: '100'});\n    let authorName = build.author_name;\n    if (build.user && build.user.is_user) {\n      avatar = build.user.avatar_url;\n      authorName = build.user.name ? build.user.name : build.user.login;\n    }\n    let build_status = this.getBuildStatus(build);\n    let tileClass = classNames({\n      'tile': true,\n      'success': build_status === 'success',\n      'failed': build_status === 'failed',\n      'skipped': build_status === 'skipped',\n      'pending': build_status === 'pending'\n    });\n\n    return (\n        <div className={tileClass}>\n        <h1>{this.state.reponame}</h1>\n        <div className=\"branch\"><span>{this.state.branch}</span></div>\n        <div className=\"build\">Build #{build.build_num}</div>\n        <div className=\"email\"><img src={avatar} alt={build.author_email} width=\"75\" /></div>\n        <div className=\"author\">{authorName}</div>\n\n        <h2>{build.status}</h2>\n        <div className=\"date\">{from}</div>\n        </div>\n    );\n  }\n}\n\nTile.propTypes = {\n  token: PropTypes.string,\n  reponame: PropTypes.string,\n  branch: PropTypes.string,\n  url: PropTypes.string,\n  build_num: PropTypes.number,\n  data: PropTypes.object,\n};\n\nexport default Tile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './dashboard.css';\nimport { doRequest, filterRepo, filterBranch } from './Config'\nimport Tile from './Tile'\n\nconst max_build_num = (a, b) => a.build_num > b.build_num ? a : b;\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repofilter: props.match.params.repofilter,\n      branchfilter: props.match.params.branchfilter,\n      data: null\n    };\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.setState({\n      repofilter: newProps.match.params.repofilter,\n      branchfilter: newProps.match.params.branchfilter\n    });\n  }\n\n  componentDidMount() {\n    this.fetch();\n    // update project list every 5 minutes\n    this.fetcher = setInterval(() => this.fetch(), 60000 * 5);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetcher);\n  }\n\n  fetch() {\n    doRequest('projects').then((d) => this.setState({data: d}));\n  }\n\n  getTitle() {\n    if (!this.state.data) {\n      return 'Repo: \"none\"';\n    }\n    let repos = this.state.data.filter((repo) => filterRepo(repo.reponame, this.state.repofilter)).flatMap((repo) => repo.reponame);\n    repos.sort((a,b) => a.localeCompare(b));\n    return (repos.length > 1 ? 'Repos: ' : 'Repo: ') + repos.join(', ');\n  }\n\n  getSortedTiles() {\n    if (!this.state.data) {\n      return [];\n    }\n    let mappedrepos = this.state.data.flatMap((repo) => {\n      let temp = [];\n      if (filterRepo(repo.reponame, this.state.repofilter)) {\n        for (let branch in repo.branches) {\n          if (filterBranch(branch, this.state.branchfilter)) {\n            continue;\n          }\n          let running = repo.branches[branch].running_builds;\n          let recent = repo.branches[branch].recent_builds;\n          if (!running || !recent || running.length + recent.length === 0) {\n            continue;\n          }\n          let build = running.concat(recent).reduce(max_build_num);\n          let key = repo.reponame + branch;\n           // /project/:vcs-type/:username/:project/tree/:branch\n          let url = \"project/\" + repo.vcs_type + \"/\" + repo.username + \"/\" + repo.reponame + \"/tree/\" + branch + \"?limit=10\"\n          let reponame = repo.reponame\n          let date = Date.parse(build.added_at);\n          temp.push({\n            key: key,\n            url: url,\n            reponame: reponame,\n            branch: branch,\n            date: date,\n          });\n        }\n      }\n      return temp;\n    });\n    mappedrepos.sort((a, b) => b.date - a.date);\n    return mappedrepos.map((t) => <Tile key={t.key} url={t.url} reponame={t.reponame} branch={t.branch} />);\n  }\n\n  render() {\n    let title = this.getTitle();\n    let tiles = this.getSortedTiles();\n    return (\n      <div className=\"tiles\">\n        <h1>{title}</h1>\n        {tiles}\n      </div>\n    )\n  }\n}\n\nDashboard.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repofilter: PropTypes.string,\n      branchfilter: PropTypes.string\n    })\n  }),\n  data: PropTypes.object,\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport './index.css';\nimport Dashboard from './Dashboard';\nimport Config from './Config';\n\nReactDOM.render(\n  <Router>\n    <div>\n      <Route path=\"/\" exact component={Dashboard} />\n      <Route path=\"/repos/:repofilter\" component={Dashboard} />\n      <Route path=\"/branches/:branchfilter\" component={Dashboard} />\n      <Route path=\"/filter/:repofilter/:branchfilter\" component={Dashboard} />\n      <Route path=\"/config\" component={Config} />\n    </div>\n  </Router>,\n  document.querySelector(\"#dashboard\"))\n"],"sourceRoot":""}